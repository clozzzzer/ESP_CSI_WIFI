{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as echarts from \"echarts\";\n// import axios from 'axios'; // 如果你选择使用 Axios\n// import { EventBus } from '../event-bus.js';\nexport default {\n  data() {\n    return {\n      myChart: null,\n      option: null,\n      timer: null,\n      countlist: [],\n      Movelist: [],\n      limit: 0,\n      index: 0,\n      buffer: [],\n      isFirst: true\n    };\n  },\n  methods: {\n    initChart() {\n      // 初始化图表\n      var chartDom = document.getElementById('main');\n      this.myChart = echarts.init(chartDom);\n      var timelist = [];\n      this.countlist = []; // 初始化 countlist 数组\n\n      // 生成初始数据\n      for (var i = 1; i <= 30; i++) {\n        timelist.push(i);\n        // this.countlist.push(0); // 初始值为 0\n      }\n\n      // 初始化图表配置\n      this.option = {\n        animationDurationUpdate: 700,\n        //数据更新动画的时长\n        animation: true,\n        //开启动画\n        legend: {\n          data: ['Someone', 'Move'],\n          y: 10\n        },\n        xAxis: {\n          type: 'category',\n          data: timelist\n        },\n        yAxis: {\n          type: 'value'\n        },\n        grid: {\n          y: 40,\n          y2: 25,\n          x: 60,\n          x2: 30\n        },\n        series: [{\n          name: 'Someone',\n          data: this.countlist,\n          type: 'bar',\n          itemStyle: {\n            normal: {\n              color: \"#409EFF\",\n              barBorderRadius: [7, 7, 0, 0],\n              shadowColor: \"#409EFF\",\n              shadowOffsetX: 0,\n              shadowOffsetY: 0,\n              shadowBlur: 8\n            }\n          }\n        }, {\n          name: 'Move',\n          data: this.countlist,\n          type: 'bar',\n          itemStyle: {\n            normal: {\n              color: \"#71ae46\",\n              barBorderRadius: [7, 7, 0, 0],\n              shadowColor: \"#71ae46\",\n              shadowOffsetX: 0,\n              shadowOffsetY: 0,\n              shadowBlur: 8\n            }\n          }\n        }]\n      };\n\n      // 设置图表配置\n      this.option && this.myChart.setOption(this.option);\n    },\n    updateData() {\n      if (this.limit >= 15) {\n        this.countlist.shift();\n      } // 移除数组的第一个元素\n      if (this.limit < 15) {\n        this.limit++;\n      }\n      this.countlist.push(this.buffer[this.index]); // 添加新的随机数值到数组末尾\n      this.index++;\n      // 更新图表数据\n      this.myChart.setOption({\n        series: [{\n          name: 'Move',\n          data: this.countlist\n        }]\n      });\n    },\n    fetchData() {\n      fetch('http://172.20.10.2:3000/api/datamove').then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      }).then(data => {\n        this.buffer.push(data.Value); // 响应数据结构 { Value: 0|1 }\n      }).catch(error => {\n        console.error('Error fetching realtime data:', error);\n      });\n    },\n    getWSData() {\n      const ws = new WebSocket('ws://192.168.126.209:8000');\n      ws.onopen = () => {\n        console.log('WebSocket connection established');\n      };\n      ws.onmessage = event => {\n        const data = JSON.parse(event.data);\n        if (!this.isFirst) {\n          this.loadWS(data);\n        }\n        this.isFirst = false;\n      };\n      ws.onclose = () => {\n        console.log('WebSocket connection closed');\n      };\n      ws.onerror = error => {\n        console.error('WebSocket error:', error);\n      };\n    },\n    loadWS(data) {\n      if (this.limit >= 30) {\n        this.countlist.shift();\n        this.Movelist.shift();\n      } // 移除数组的第一个元素\n      if (this.limit < 30) {\n        this.limit++;\n      }\n      this.countlist.push(data[0].someone); // 添加新的随机数值到数组末尾\n      this.Movelist.push(data[0].move);\n      // 更新图表数据\n      this.myChart.setOption({\n        series: [{\n          name: 'Someone',\n          data: this.countlist\n        }, {\n          name: 'Move',\n          data: this.Movelist\n        }]\n      });\n    }\n  },\n  created() {\n    this.getWSData();\n  },\n  mounted() {\n    // 初始化图表\n    this.initChart();\n\n    /*     // 定义一个组件定时器，每0.5s向服务器发请求获得数据并存入缓冲区\r\n    \r\n        this.timer = setInterval(() => {\r\n          this.fetchData();\r\n        }, 500);\r\n    \r\n        // 初始化定时器，每隔一秒更新数据和刷新图表\r\n        EventBus.$on('update-data', this.updateData); */\n  },\n  beforeDestroy() {\n    /*     // 组件销毁前停止监听，防止内存泄漏\r\n        EventBus.$off('update-data', this.updateData);\r\n        clearInterval(this.timer); */\n  }\n};","map":{"version":3,"names":["echarts","data","myChart","option","timer","countlist","Movelist","limit","index","buffer","isFirst","methods","initChart","chartDom","document","getElementById","init","timelist","i","push","animationDurationUpdate","animation","legend","y","xAxis","type","yAxis","grid","y2","x","x2","series","name","itemStyle","normal","color","barBorderRadius","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","setOption","updateData","shift","fetchData","fetch","then","response","ok","Error","json","Value","catch","error","console","getWSData","ws","WebSocket","onopen","log","onmessage","event","JSON","parse","loadWS","onclose","onerror","someone","move","created","mounted","beforeDestroy"],"sources":["src/components/BaseFour.vue"],"sourcesContent":["<template>\r\n  <div class=\"base-four\" id=\"main\">\r\n    \r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport * as echarts from \"echarts\";\r\n// import axios from 'axios'; // 如果你选择使用 Axios\r\n// import { EventBus } from '../event-bus.js';\r\nexport default {\r\n  data() {\r\n    return {\r\n      myChart: null,\r\n      option: null,\r\n      timer: null,\r\n      countlist: [],\r\n      Movelist:[],\r\n      limit:0,\r\n      index:0,\r\n      buffer:[],\r\n      isFirst:true,\r\n    };\r\n  },\r\n  methods: {\r\n    initChart() {\r\n      // 初始化图表\r\n      var chartDom = document.getElementById('main');\r\n      this.myChart = echarts.init(chartDom);\r\n      var timelist = [];\r\n      this.countlist = []; // 初始化 countlist 数组\r\n\r\n      // 生成初始数据\r\n      for (var i = 1; i <= 30; i++) {\r\n        timelist.push(i);\r\n        // this.countlist.push(0); // 初始值为 0\r\n      }\r\n\r\n      // 初始化图表配置\r\n      this.option = {\r\n        animationDurationUpdate: 700,  //数据更新动画的时长\r\n        animation: true ,//开启动画\r\n        legend: {\r\n          data: ['Someone','Move'],\r\n          y: 10\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          data: timelist\r\n        },\r\n        yAxis: {\r\n          type: 'value'\r\n        },\r\n        grid: {\r\n          y: 40,\r\n          y2: 25,\r\n          x: 60,\r\n          x2: 30\r\n        },\r\n        series: [\r\n          {\r\n            name: 'Someone',\r\n            data: this.countlist,\r\n            type: 'bar',\r\n            itemStyle: {\r\n              normal: {\r\n                color: \"#409EFF\",\r\n                barBorderRadius: [7, 7, 0, 0],\r\n                shadowColor: \"#409EFF\",\r\n                shadowOffsetX: 0,\r\n                shadowOffsetY: 0,\r\n                shadowBlur: 8\r\n              }\r\n            }\r\n          },\r\n                    {\r\n            name: 'Move',\r\n            data: this.countlist,\r\n            type: 'bar',\r\n            itemStyle: {\r\n              normal: {\r\n                color: \"#71ae46\",\r\n                barBorderRadius: [7, 7, 0, 0],\r\n                shadowColor: \"#71ae46\",\r\n                shadowOffsetX: 0,\r\n                shadowOffsetY: 0,\r\n                shadowBlur: 8\r\n              }\r\n            }\r\n          },\r\n        ]\r\n      };\r\n\r\n      // 设置图表配置\r\n      this.option && this.myChart.setOption(this.option);\r\n    },\r\n    updateData() {\r\n            if(this.limit>=15)\r\n            {\r\n                this.countlist.shift(); \r\n            }// 移除数组的第一个元素\r\n            if(this.limit<15)\r\n            {\r\n                this.limit++;\r\n            }\r\n            this.countlist.push(this.buffer[this.index]); // 添加新的随机数值到数组末尾\r\n            this.index++;\r\n            // 更新图表数据\r\n            this.myChart.setOption({\r\n                series: [\r\n                {\r\n                    name: 'Move',\r\n                    data: this.countlist\r\n                }\r\n                ]\r\n            });\r\n    },\r\n    fetchData () {\r\n        fetch('http://172.20.10.2:3000/api/datamove')\r\n            .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            return response.json();\r\n            })\r\n            .then(data => {\r\n            this.buffer.push(data.Value); // 响应数据结构 { Value: 0|1 }\r\n            })\r\n            .catch(error => {\r\n            console.error('Error fetching realtime data:', error);\r\n            });\r\n    },\r\n    getWSData () {\r\n      const ws = new WebSocket('ws://192.168.126.209:8000');\r\n\r\n      ws.onopen = () => {\r\n        console.log('WebSocket connection established');\r\n      };\r\n\r\n      ws.onmessage = (event) => {\r\n        const data = JSON.parse(event.data);\r\n        if(!this.isFirst)\r\n        {\r\n          this.loadWS(data);\r\n          \r\n        }\r\n        this.isFirst = false\r\n      };\r\n\r\n      ws.onclose = () => {\r\n        console.log('WebSocket connection closed');\r\n      };\r\n\r\n      ws.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n      };\r\n    },\r\n    loadWS (data) {\r\n            if(this.limit>=30)\r\n            {\r\n                this.countlist.shift(); \r\n                this.Movelist.shift();\r\n            }// 移除数组的第一个元素\r\n            if(this.limit<30)\r\n            {\r\n                this.limit++;\r\n            }\r\n            this.countlist.push(data[0].someone); // 添加新的随机数值到数组末尾\r\n            this.Movelist.push(data[0].move)\r\n            // 更新图表数据\r\n            this.myChart.setOption({\r\n                series: [\r\n                {\r\n                    name: 'Someone',\r\n                    data: this.countlist\r\n                },\r\n                {\r\n                    name: 'Move',\r\n                    data: this.Movelist\r\n                }\r\n                ]\r\n            });\r\n    }\r\n  },\r\n  created () {\r\n    this.getWSData();\r\n  },\r\n  mounted() {\r\n    // 初始化图表\r\n    this.initChart();\r\n\r\n/*     // 定义一个组件定时器，每0.5s向服务器发请求获得数据并存入缓冲区\r\n\r\n    this.timer = setInterval(() => {\r\n      this.fetchData();\r\n    }, 500);\r\n\r\n    // 初始化定时器，每隔一秒更新数据和刷新图表\r\n    EventBus.$on('update-data', this.updateData); */\r\n  },\r\n  beforeDestroy() {\r\n/*     // 组件销毁前停止监听，防止内存泄漏\r\n    EventBus.$off('update-data', this.updateData);\r\n    clearInterval(this.timer); */\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.base-four {\r\n    background-color:white;\r\n    width:60%;\r\n    height:40%;\r\n    border: 1px solid #ffffff; /* 边框样式 */\r\n    box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\r\n    float:right;\r\n    margin-left: 50px;\r\n    border-radius: 30px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}